/* prettier-ignore-start */

/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file is auto-generated by TanStack Router

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as ProtectedImport } from './routes/_protected'
import { Route as IndexImport } from './routes/index'

// Create Virtual Routes

const RegisterLazyImport = createFileRoute('/register')()
const LoginLazyImport = createFileRoute('/login')()
const ProtectedHomeLazyImport = createFileRoute('/_protected/home')()
const ProtectedStockIndexLazyImport = createFileRoute('/_protected/stock/')()
const ProtectedOrderIndexLazyImport = createFileRoute('/_protected/order/')()
const ProtectedCustomerIndexLazyImport = createFileRoute(
  '/_protected/customer/',
)()
const ProtectedOrderOrderIdLazyImport = createFileRoute(
  '/_protected/order/$orderId',
)()
const ProtectedManagementEmployeesLazyImport = createFileRoute(
  '/_protected/management/employees',
)()
const ProtectedManagementCompanyLazyImport = createFileRoute(
  '/_protected/management/company',
)()
const ProtectedManagementRolesIndexLazyImport = createFileRoute(
  '/_protected/management/roles/',
)()
const ProtectedManagementRolesRoleIdLazyImport = createFileRoute(
  '/_protected/management/roles/$roleId',
)()

// Create/Update Routes

const RegisterLazyRoute = RegisterLazyImport.update({
  path: '/register',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/register.lazy').then((d) => d.Route))

const LoginLazyRoute = LoginLazyImport.update({
  path: '/login',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/login.lazy').then((d) => d.Route))

const ProtectedRoute = ProtectedImport.update({
  id: '/_protected',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const ProtectedHomeLazyRoute = ProtectedHomeLazyImport.update({
  path: '/home',
  getParentRoute: () => ProtectedRoute,
} as any).lazy(() =>
  import('./routes/_protected/home.lazy').then((d) => d.Route),
)

const ProtectedStockIndexLazyRoute = ProtectedStockIndexLazyImport.update({
  path: '/stock/',
  getParentRoute: () => ProtectedRoute,
} as any).lazy(() =>
  import('./routes/_protected/stock/index.lazy').then((d) => d.Route),
)

const ProtectedOrderIndexLazyRoute = ProtectedOrderIndexLazyImport.update({
  path: '/order/',
  getParentRoute: () => ProtectedRoute,
} as any).lazy(() =>
  import('./routes/_protected/order/index.lazy').then((d) => d.Route),
)

const ProtectedCustomerIndexLazyRoute = ProtectedCustomerIndexLazyImport.update(
  {
    path: '/customer/',
    getParentRoute: () => ProtectedRoute,
  } as any,
).lazy(() =>
  import('./routes/_protected/customer/index.lazy').then((d) => d.Route),
)

const ProtectedOrderOrderIdLazyRoute = ProtectedOrderOrderIdLazyImport.update({
  path: '/order/$orderId',
  getParentRoute: () => ProtectedRoute,
} as any).lazy(() =>
  import('./routes/_protected/order/$orderId.lazy').then((d) => d.Route),
)

const ProtectedManagementEmployeesLazyRoute =
  ProtectedManagementEmployeesLazyImport.update({
    path: '/management/employees',
    getParentRoute: () => ProtectedRoute,
  } as any).lazy(() =>
    import('./routes/_protected/management/employees.lazy').then(
      (d) => d.Route,
    ),
  )

const ProtectedManagementCompanyLazyRoute =
  ProtectedManagementCompanyLazyImport.update({
    path: '/management/company',
    getParentRoute: () => ProtectedRoute,
  } as any).lazy(() =>
    import('./routes/_protected/management/company.lazy').then((d) => d.Route),
  )

const ProtectedManagementRolesIndexLazyRoute =
  ProtectedManagementRolesIndexLazyImport.update({
    path: '/management/roles/',
    getParentRoute: () => ProtectedRoute,
  } as any).lazy(() =>
    import('./routes/_protected/management/roles/index.lazy').then(
      (d) => d.Route,
    ),
  )

const ProtectedManagementRolesRoleIdLazyRoute =
  ProtectedManagementRolesRoleIdLazyImport.update({
    path: '/management/roles/$roleId',
    getParentRoute: () => ProtectedRoute,
  } as any).lazy(() =>
    import('./routes/_protected/management/roles/$roleId.lazy').then(
      (d) => d.Route,
    ),
  )

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/_protected': {
      id: '/_protected'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof ProtectedImport
      parentRoute: typeof rootRoute
    }
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginLazyImport
      parentRoute: typeof rootRoute
    }
    '/register': {
      id: '/register'
      path: '/register'
      fullPath: '/register'
      preLoaderRoute: typeof RegisterLazyImport
      parentRoute: typeof rootRoute
    }
    '/_protected/home': {
      id: '/_protected/home'
      path: '/home'
      fullPath: '/home'
      preLoaderRoute: typeof ProtectedHomeLazyImport
      parentRoute: typeof ProtectedImport
    }
    '/_protected/management/company': {
      id: '/_protected/management/company'
      path: '/management/company'
      fullPath: '/management/company'
      preLoaderRoute: typeof ProtectedManagementCompanyLazyImport
      parentRoute: typeof ProtectedImport
    }
    '/_protected/management/employees': {
      id: '/_protected/management/employees'
      path: '/management/employees'
      fullPath: '/management/employees'
      preLoaderRoute: typeof ProtectedManagementEmployeesLazyImport
      parentRoute: typeof ProtectedImport
    }
    '/_protected/order/$orderId': {
      id: '/_protected/order/$orderId'
      path: '/order/$orderId'
      fullPath: '/order/$orderId'
      preLoaderRoute: typeof ProtectedOrderOrderIdLazyImport
      parentRoute: typeof ProtectedImport
    }
    '/_protected/customer/': {
      id: '/_protected/customer/'
      path: '/customer'
      fullPath: '/customer'
      preLoaderRoute: typeof ProtectedCustomerIndexLazyImport
      parentRoute: typeof ProtectedImport
    }
    '/_protected/order/': {
      id: '/_protected/order/'
      path: '/order'
      fullPath: '/order'
      preLoaderRoute: typeof ProtectedOrderIndexLazyImport
      parentRoute: typeof ProtectedImport
    }
    '/_protected/stock/': {
      id: '/_protected/stock/'
      path: '/stock'
      fullPath: '/stock'
      preLoaderRoute: typeof ProtectedStockIndexLazyImport
      parentRoute: typeof ProtectedImport
    }
    '/_protected/management/roles/$roleId': {
      id: '/_protected/management/roles/$roleId'
      path: '/management/roles/$roleId'
      fullPath: '/management/roles/$roleId'
      preLoaderRoute: typeof ProtectedManagementRolesRoleIdLazyImport
      parentRoute: typeof ProtectedImport
    }
    '/_protected/management/roles/': {
      id: '/_protected/management/roles/'
      path: '/management/roles'
      fullPath: '/management/roles'
      preLoaderRoute: typeof ProtectedManagementRolesIndexLazyImport
      parentRoute: typeof ProtectedImport
    }
  }
}

// Create and export the route tree

export const routeTree = rootRoute.addChildren({
  IndexRoute,
  ProtectedRoute: ProtectedRoute.addChildren({
    ProtectedHomeLazyRoute,
    ProtectedManagementCompanyLazyRoute,
    ProtectedManagementEmployeesLazyRoute,
    ProtectedOrderOrderIdLazyRoute,
    ProtectedCustomerIndexLazyRoute,
    ProtectedOrderIndexLazyRoute,
    ProtectedStockIndexLazyRoute,
    ProtectedManagementRolesRoleIdLazyRoute,
    ProtectedManagementRolesIndexLazyRoute,
  }),
  LoginLazyRoute,
  RegisterLazyRoute,
})

/* prettier-ignore-end */

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/_protected",
        "/login",
        "/register"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/_protected": {
      "filePath": "_protected.tsx",
      "children": [
        "/_protected/home",
        "/_protected/management/company",
        "/_protected/management/employees",
        "/_protected/order/$orderId",
        "/_protected/customer/",
        "/_protected/order/",
        "/_protected/stock/",
        "/_protected/management/roles/$roleId",
        "/_protected/management/roles/"
      ]
    },
    "/login": {
      "filePath": "login.lazy.tsx"
    },
    "/register": {
      "filePath": "register.lazy.tsx"
    },
    "/_protected/home": {
      "filePath": "_protected/home.lazy.tsx",
      "parent": "/_protected"
    },
    "/_protected/management/company": {
      "filePath": "_protected/management/company.lazy.tsx",
      "parent": "/_protected"
    },
    "/_protected/management/employees": {
      "filePath": "_protected/management/employees.lazy.tsx",
      "parent": "/_protected"
    },
    "/_protected/order/$orderId": {
      "filePath": "_protected/order/$orderId.lazy.tsx",
      "parent": "/_protected"
    },
    "/_protected/customer/": {
      "filePath": "_protected/customer/index.lazy.tsx",
      "parent": "/_protected"
    },
    "/_protected/order/": {
      "filePath": "_protected/order/index.lazy.tsx",
      "parent": "/_protected"
    },
    "/_protected/stock/": {
      "filePath": "_protected/stock/index.lazy.tsx",
      "parent": "/_protected"
    },
    "/_protected/management/roles/$roleId": {
      "filePath": "_protected/management/roles/$roleId.lazy.tsx",
      "parent": "/_protected"
    },
    "/_protected/management/roles/": {
      "filePath": "_protected/management/roles/index.lazy.tsx",
      "parent": "/_protected"
    }
  }
}
ROUTE_MANIFEST_END */
